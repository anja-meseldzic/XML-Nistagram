version: "3.8"
services:
  gateway:
    image: nginx:1.19.8-alpine
    ports:
      - 8080:8080
    networks:
      - backend
    restart: always
    volumes:
      - ./microservices/gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./microservices/gateway/api_gateway.conf:/etc/nginx/api_gateway.conf

  auth-service:
    image: auth-service
    container_name: auth-service
    build:
      context: ./microservices/auth
      dockerfile: Dockerfile
    environment: 
      DATABASE_DOMAIN : ${DATABASE_DOMAIN}
      DATABASE_PORT : ${DATABASE_PORT}
      PROFILE_SERVICE_DOMAIN: ${PROFILE_SERVICE_DOMAIN}
      PROFILE_SERVICE_PORT : ${PROFILE_SERVICE_PORT}
    restart: always
    depends_on: 
      - postgres
      - axonserver
    networks:
      - backend

  campaign-service:
    image: campaign-service
    container_name: campaign-service
    build:
      context: ./microservices/campaign
      dockerfile: Dockerfile
    environment: 
      DATABASE_DOMAIN : ${DATABASE_DOMAIN}
      DATABASE_PORT : ${DATABASE_PORT}
      AUTH_SERVICE_DOMAIN: ${AUTH_SERVICE_DOMAIN}
      AUTH_SERVICE_PORT : ${AUTH_SERVICE_PORT}
    restart: always
    depends_on: 
      - postgres
    networks:
      - backend

  media-service:
    image: media-service
    container_name: media-service
    build:
      context: ./microservices/media
      dockerfile: Dockerfile
    environment: 
      DATABASE_DOMAIN : ${DATABASE_DOMAIN}
      DATABASE_PORT : ${DATABASE_PORT}
      PROFILE_SERVICE_DOMAIN: ${PROFILE_SERVICE_DOMAIN}
      PROFILE_SERVICE_PORT : ${PROFILE_SERVICE_PORT}
      AUTH_SERVICE_DOMAIN: ${AUTH_SERVICE_DOMAIN}
      AUTH_SERVICE_PORT : ${AUTH_SERVICE_PORT}
      NOTIFICATION_SERVICE_DOMAIN: ${NOTIFICATION_SERVICE_DOMAIN}
      NOTIFICATION_SERVICE_PORT : ${NOTIFICATION_SERVICE_PORT}
      MEDIA_STORAGE_PATH : ${MEDIA_STORAGE_PATH}
    restart: always
    volumes:
      - myapp:/app/storage/media-content
    depends_on: 
      - postgres
    networks:
      - backend

  message-service:
    image: message-service
    container_name: message-service
    build:
      context: ./microservices/message
      dockerfile: Dockerfile
    environment: 
      DATABASE_DOMAIN : ${DATABASE_DOMAIN}
      DATABASE_PORT : ${DATABASE_PORT}
      AUTH_SERVICE_DOMAIN: ${AUTH_SERVICE_DOMAIN}
      AUTH_SERVICE_PORT : ${AUTH_SERVICE_PORT}
      MEDIA_SERVICE_DOMAIN: ${MEDIA_SERVICE_DOMAIN}
      MEDIA_SERVICE_PORT : ${MEDIA_SERVICE_PORT}
      MEDIA_STORAGE_PATH : ${MEDIA_STORAGE_PATH}
    restart: always
    depends_on: 
      - postgres
    networks:
      - backend

  notification-service:
    image: notification-service
    container_name: notification-service
    build:
      context: ./microservices/notification
      dockerfile: Dockerfile
    environment: 
      DATABASE_DOMAIN : ${DATABASE_DOMAIN}
      DATABASE_PORT : ${DATABASE_PORT}
      AUTH_SERVICE_DOMAIN: ${AUTH_SERVICE_DOMAIN}
      AUTH_SERVICE_PORT : ${AUTH_SERVICE_PORT}
      PROFILE_SERVICE_DOMAIN: ${PROFILE_SERVICE_DOMAIN}
      PROFILE_SERVICE_PORT : ${PROFILE_SERVICE_PORT}
    restart: always
    depends_on: 
      - postgres
    networks:
      - backend      

  profile-service:
    image: profile-service
    container_name: profile-service
    build:
      context: ./microservices/profile
      dockerfile: Dockerfile
    environment: 
      DATABASE_DOMAIN : ${DATABASE_DOMAIN}
      DATABASE_PORT : ${DATABASE_PORT}
      AUTH_SERVICE_DOMAIN: ${AUTH_SERVICE_DOMAIN}
      AUTH_SERVICE_PORT : ${AUTH_SERVICE_PORT}
      NOTIFICATION_SERVICE_DOMAIN: ${NOTIFICATION_SERVICE_DOMAIN}
      NOTIFICATION_SERVICE_PORT : ${NOTIFICATION_SERVICE_PORT}
      PROFILE_STORAGE_PATH : ${PROFILE_STORAGE_PATH}
    volumes:
      - myapp2:/app/storage/media-content
    restart: always
    depends_on: 
      - postgres
      - axonserver
    networks:
      - backend

  agent:
    image: agent
    container_name: agent
    build:
      context: ./agent
      dockerfile: Dockerfile
    environment: 
      DATABASE_DOMAIN : ${DATABASE_DOMAIN}
      DATABASE_PORT : ${DATABASE_PORT}
      MEDIA_STORAGE_PATH : ${MEDIA_STORAGE_PATH}
      XML_DATABASE_DOMAIN : ${XML_DATABASE_DOMAIN}
      XML_DATABASE_PORT : ${XML_DATABASE_PORT}
      CAMPAIGN_SERVICE_DOMAIN : ${CAMPAIGN_SERVICE_DOMAIN}
      CAMPAIGN_SERVICE_PORT : ${CAMPAIGN_SERVICE_PORT}
      PATH: api/campaign/campaign/reports
    volumes:
      - agentapp:/app/storage/media-content
    restart: always
    ports:
      - 8090:8090
    depends_on: 
      - postgres
      - exist
    networks:
      - backend

  axonserver:
    image: axoniq/axonserver
    container_name: axonserver
    ports: 
      - 8024:8024
      - 8124:8124    
    restart: on-failure
    networks: 
      - backend

  postgres:
    image: postgres
    container_name: postgres
    build: 
      context: ./microservices/postgres
      dockerfile: Dockerfile
    ports: 
      - 5432:5432
    restart: on-failure
    environment: 
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: root
    networks: 
      - backend

  exist:
    image: existdb/existdb:latest
    container_name: exist
    ports: 
      - 8079:8080
    restart: on-failure
    networks: 
      - backend

networks:
  backend:
    name: backend
    driver: bridge

volumes:
  myapp:
  myapp2:
  agentapp: